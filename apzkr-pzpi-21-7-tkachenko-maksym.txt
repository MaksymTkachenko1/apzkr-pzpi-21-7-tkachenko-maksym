Міністерство освіти і науки України Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук Кафедра програмної інженерії
КУРСОВА РОБОТА ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення» Тема роботи: Програмна система для автоматизації процесів дистанційного навчання і контроля

Студент гр. ПЗПІ-21-7		Ткаченко М.
(підпис)
Керівник роботи		 ст.викл. Сокорчук І.П.
(підпис)
Роботу захищено «	»	2024 р. з оцінкою 			

Комісія:		доц. Лещинський В.О.
(підпис)
	доц. Лещинська І.О.
(підпис)
	ст.викл. Сокорчук І.П.
(підпис)

Харків
2024 р. 
ДОДАТОК В. Зразок бланка завдання на курсову роботу Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук	 Кафедра програмної інженерії  Спеціальність 121 – Інженерія програмного забезпечення	 Курс    3	 Семестр 		6			 Навчальна дисципліна Архітектура програмного забезпечення		

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ


	Ткаченко Максиму Андрійовичу	
1.	Тема	роботи:	«Програмна система для автоматизації процесів дистанційного навчання і контроля»___________			
2.	Термін узгодження завдання курсової роботи «  4	»	березня	 2024 р.
3.	Термін здачі студентом закінченої роботи « 31 »  серпня	2024 р.
4.	Вихідні дані до проекту (роботи): В програмній системі передбачити: додавання нового клієнта, інформація про оцінки клієнта, Iot система у вигляді SMART зчитувача. Використовувати ОС Windows 11, MongoDB, середовище розробки Microsoft Visual Studio Code.	
5.	Зміст пояснювальної записки (перелік питань, що належить розробити) вступ, аналіз предметної області, постановка задачі, проектування програмного проекту, структура бази даних, кодування програмного проекту, опис розробленої програмної системи, висновки, перелік посилань, додатки
6.	Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень  схема бази даних, діаграма варіантів використання, діаграма розгортання, інтерфейс головної сторінки
 
КАЛЕНДАРНИЙ ПЛАН


№	Назва етапів курсової роботи	Термін виконання
етапів роботи	Примітка
1	Функціональна специфікація
програмного проекту	13.03.2024	виконано
2	Проектування програмного
проекту	03.04.2024	виконано
3	Кодування програмного проекту	24.04.2024	виконано
4	Оформлення пояснювальної записки	5.06.2024	виконано
5	Захист курсової роботи	08.06.2024	виконано

Дата видачі завдання «  4	 » 	березня	 2024 р.


Керівник		 ст.викл. Сокорчук І.П.
(підпис)


Завдання прийняв до виконання
ст.гр. ПЗПІ-21-7			Ткаченко М.
(підпис) 
РЕФЕРАТ



Пояснювальна записка до курсової роботи: 46 с., 6 рис., 5 джерел.
СИСТЕМА КОНТРОЛЮ, МОБІЛЬНИЙ ДОДАТОК, АРДУІНО, НАВЧАННЯ, РЕКОМЕНДАЦІЇ, ІНТЕГРАЦІЯ.
Об’єктом дослідження є процеси організації дистанційного навчання та моніторингу успішності студентів. У сучасних умовах дистанційна освіта потребує ефективних рішень для автоматизації навчальних процесів, контролю знань та взаємодії між викладачами і студентами. Це особливо актуально в умовах зростання кількості студентів, які обирають онлайн-формат навчання. Основними проблемами, з якими стикаються навчальні заклади, є необхідність у надійних інструментах для проведення онлайн-занять, тестування, контролю за успішністю студентів та зворотного зв’язку.
Метою курсової роботи є розробка програмної системи, яка автоматизує процеси дистанційного навчання та контролю знань студентів. Система забезпечуватиме можливість проведення онлайн-лекцій, управління навчальними матеріалами, автоматизованого тестування, а також моніторингу активності студентів. Крім того, передбачена інтеграція з мобільним додатком для доступу до навчальних матеріалів і результатів тестувань у будь-який час.
Методи розробки включають використання технології Python для серверної частини системи, HTML для розробки веб-інтерфейсу, MongoDB для бази даних, та React Native для мобільного додатку. Було розроблено такі модулі: students (дані про студентів), courses (курси і навчальні матеріали), assessments (тестування і контроль знань), та instructors (дані про викладачів).
У результаті роботи було створено комплексну програмну систему для автоматизації дистанційного навчання. Система складається з веб-додатку для адміністрування навчального процесу, мобільного додатку для студентів, а також серверної частини для обробки даних та забезпечення безперебійної роботи всіх компонентів системи. 
Зміст
Історія ревізій	6
1.	БІЗНЕС-ВИМОГИ	6
1.1.	Передумови	7
1.2.	Бізнес-можливості	8
1.3.	Бізнес-цілі та критерії успіху	8
1.4.	Потреби клієнтів або ринку	9
1.5.	Бізнес-ризики	10
2.	КОНЦЕПЦІЯ РІШЕННЯ	12
2.1.	Окреслення концепції	12
2.2.	Головна функціональність	12
2.3.	Припущення та залежності	13
3.	РАМКИ ТА ОБМЕЖЕННЯ ПРОЕКТУ	15
3.1.	Рамки початкового випуску	15
3.2.	Рамки наступних випусків	16
4.	БІЗНЕС-КОНТЕКСТ	19
4.1.	Профілі зацікавлених сторін	19
4.2.	Пріоритети проекту	19
4.3.	Робоче середовище	19
5.	СЕРВЕРНАЯ ЧАСТИНА ПРОДУКТУ	21
5.1.	База даних	21
5.2.	Backend	23
5.3.	Структура проекту	24
5.5. Cпецифікація	28
6.	ПРИСТРІЙ ІНТЕРНЕТ РЕЧЕЙ	29
6.1.	Обраний IOT застосунок	29
6.2.	Процес роботи з IOT застосунком	29
6.3.	Програмне забезпечення та будова пристрою	29
6.4.	Діаграми	30
7.	ВЕБ-ДОДАТОК	34
7.1.	Розробка системи	34
7.2.	Архітектура та компоненти	34
7.3.	Реалізований функції веб-додатка	34
7.4.	Архітектура та діаграми	35
8.	МОБІЛЬНИЙ ДОДАТОК	42
8.1.	Розробка системи	42
8.2.	Реалізований функції веб-додатка	42
8.3.	Архітектура та діаграми	42
Висновок	47
Перелік джерел посилання	48
ДОДАТОК А	49 
Історія ревізій

Назва	Дата	Причини змін	Версія
			
 
1.	БІЗНЕС-ВИМОГИ
1.1.	Передумови

У сучасному світі дистанційне навчання вимагає значних зусиль та часу від студентів і викладачів, які прагнуть забезпечити ефективний освітній процес. Процес включає в себе організацію онлайн-занять, створення та розповсюдження навчальних матеріалів, проведення тестувань та контроль успішності студентів. Це може стати викликом, особливо коли необхідно одночасно обслуговувати велику кількість учасників навчального процесу та забезпечувати доступ до актуальної інформації.
У цьому контексті програмна система, що автоматизує процеси дистанційного навчання і контролю знань, стає ключовою для забезпечення зручності та ефективності освітнього процесу. По-перше, викладачі зіштовхуються з проблемою управління великим обсягом навчальних даних і матеріалів, де важливо не лише забезпечити доступ до них, але й гарантувати відповідність навчальної програми актуальним стандартам та вимогам. Система повинна надавати можливості для створення та редагування курсів, автоматичного оцінювання тестів, а також збереження даних щодо прогресу студентів, що відповідає їхнім навчальним потребам.
Крім того, питання зручності доступу до навчальних матеріалів є критично важливим. Студенти мають потребу у швидкому доступі до лекцій, завдань та тестів, не витрачаючи багато часу на пошук необхідної інформації. Така система повинна забезпечувати інтуїтивно зрозумілий інтерфейс для швидкого доступу до навчальних матеріалів та інструментів, що дозволяє студентам ефективно керувати своїм навчанням.
Нарешті, персоналізація навчального процесу відіграє ключову роль у задоволенні потреб сучасних студентів. Система має надавати індивідуальні рекомендації щодо навчальних матеріалів та тестів, враховуючи індивідуальні потреби, рівень підготовки та прогрес студентів, що допомагає їм досягати кращих результатів та забезпечує більш задовільний навчальний досвід.
Таким чином, розробка програмної системи для автоматизації процесів дистанційного навчання і контролю є важливою для освітніх установ, які прагнуть підвищити зручність, ефективність та індивідуалізацію навчального процесу.

1.2.	Бізнес-можливості

Аналоги:
-	OnlineEdu — ця компанія пропонує програмне забезпечення для дистанційного навчання, яке враховує індивідуальні потреби студентів та сучасні освітні тенденції. Їхня система забезпечує зручний та ефективний процес навчання для користувачів. Однак, програмне забезпечення може мати обмеження у варіативності курсів та можливостях персоналізації навчання.
-	LearnSmart — ця компанія спеціалізується на наданні персоналізованих рекомендацій з навчання, заснованих на аналізі успішності студентів та їх індивідуальних потреб. Вони пропонують широкий вибір курсів та навчальних матеріалів. Однак, їхня платформа може мати обмеження у доступності та інтеграції з місцевими освітніми установами.
-	Даний програмний продукт розрахований на ринок освіти та навчальних закладів. Основний спосіб монетизації — це співпраця з малими та середніми навчальними закладами, пропонуючи їм інструменти для залучення студентів через персоналізовані навчальні програми та покращення досвіду навчання завдяки інтерактивним технологіям і можливостям автоматичного оцінювання.

1.3.	Бізнес-цілі та критерії успіху

БЦ-1: Підвищення персоналізації покупки навчальної програми:
-	БЦ-1.1: Розробити систему, яка надає персоналізовані навчальні плани та матеріали для студентів на основі їх рівня знань та потреб. 
-	БЦ-1.2:	Впровадити інтеграцію з інструментами для автоматичного тестування та оцінювання для підвищення точності контролю знань студентів.  
БЦ-2: Розширення ринку та аудиторії:
-	БЦ-2.1:	Залучити	до	системи	не	менше	1000	активних користувачів у перші шість місяців після запуску.
-	БЦ-2.2: Співпрацювати з не менше ніж 20 навчальними закладами для впровадження системи дистанційного навчання. 
БЦ-3: Монетизація системи:
-	БЦ-3.1: Впровадити модель монетизації через продаж ліцензій на використання програмного забезпечення та надання преміальних функцій. 
-	БЦ-3.2: Розвивати партнерські програми з навчальними закладами для отримання доходу від підписки та преміальних функцій. 

КУ-1: Задоволеність користувачів:
-	КУ-1.1: Досягти позитивних відгуків від не менше ніж 80% користувачів, які використовують систему для дистанційного навчання 
-	КУ-1.2: Забезпечити рівень залученості користувачів, при якому щонайменше 50% зареєстрованих користувачів використовують систему щомісяця.
КУ-2: Ефективність системи та партнерства:
-	КУ-2.1: Забезпечити стабільність роботи системи з часом відповіді не більше 2 секунд при використанні основних функцій.
-	КУ-2.2: Укласти партнерські угоди з не менше ніж 20 навчальними закладами у перші шість місяців після запуску. 
КУ-3: Фінансові показники успіху:
-	КУ-3.1: Досягти позитивного чистого прибутку від діяльності системи у перші 12 місяців після запуску.
-	КУ-3.2: Забезпечити зростання доходів від монетизації системи не менше ніж на 20% кожного кварталу після другого року експлуатації..

1.4.	Потреби клієнтів або ринку 
Індивідуалізовані рекомендації для вибору навчальної програми:
-	Клієнти прагнуть отримати індивідуалізовані навчальні плани та матеріали, які б враховували їхні індивідуальні потреби та рівень знань, забезпечуючи оптимальний процес навчання. 
Зручність та швидкість вибору навчальної програми:
-	Клієнти бажають мати доступ до інтуїтивно зрозумілого інтерфейсу та ефективної системи пошуку, яка дозволяє легко знаходити необхідні навчальні матеріали та завдання. 
Економія часу та зусиль:
-	Клієнти хочуть мінімізувати час та зусилля, необхідні для організації та контролю процесу навчання, завдяки автоматизованим інструментам оцінювання та зворотного зв'язку. 
Адаптація до різноманітних модних вподобань:
-	Клієнти шукають систему, здатну адаптуватися до різних стилів навчання та забезпечити інтерактивні та багатофункціональні освітні ресурси. 
Інтеграція з реальними навчальний закладами та брендами:
-	Клієнти прагнуть, щоб система була інтегрована з існуючими освітніми платформами та інструментами, забезпечуючи безшовний досвід навчання та контролю. 

1.5.	Бізнес-ризики

Технічні недоліки SMART-системи:
-	Ризик виникнення технічних збоїв або несправностей
SMART-міток та сканерів, що може призвести до неможливості ідентифікації. Це може підірвати довіру користувачів до системи.
Низька прийнятність ринку:
-	Ризик, що споживачі можуть не бути готовими до використання нових технологій дистанційного навчання через складнощі у використанні або небажання змінювати традиційні методи навчання. 
Конкуренція:
-	Ризик зіткнення з конкуренцією від наявних альтернативних рішень або нових гравців на ринку, які можуть пропонувати більш привабливі або інноваційні системи навчання. 
Проблеми з приватністю та захистом даних:
-	Ризик витоку персональних даних клієнтів через несанкціонований доступ або технічні недоліки системи. Це може викликати занепокоєння щодо приватності та призвести до юридичних наслідків. 
Залежність від партнерів:
-	Ризик залежності від навчальних закладів та освітніх партнерів, які можуть змінити свої політики або відмовитися від використання системи. Це може негативно вплинути на доступність та ефективність сервісу для кінцевих користувачів.  
2.	КОНЦЕПЦІЯ РІШЕННЯ
2.1.	Окреслення концепції

Ця програмна система розроблена для радикальної зміни підходу до дистанційного навчання та забезпечення контролю над навчальним процесом. Використовуючи сучасні технології, наш продукт дозволяє автоматизувати рутинні завдання, підвищуючи ефективність навчання та забезпечуючи індивідуальний підхід до кожного студента.

Основні переваги цієї системи полягають у здатності значно покращити навчальний досвід, скорочуючи час, який студенти та викладачі витрачають на адміністративні завдання. Система забезпечує високий рівень персоналізації, пропонуючи навчальні матеріали та завдання, які відповідають рівню підготовки і потребам кожного студента. Це не тільки підвищує мотивацію і залученість студентів, але й сприяє підвищенню успішності та якості освіти.
Впровадження системи автоматизації дистанційного навчання створить нові можливості для навчальних закладів, дозволяючи їм пропонувати інноваційний та інтерактивний навчальний досвід. Заклади зможуть ефективніше організовувати навчальний процес, враховуючи індивідуальні потреби та можливості студентів, що підвищить їхню лояльність і задоволеність навчанням.
Ця програмна система стане новаторським рішенням на ринку освіти, пропонуючи комплексний підхід до автоматизації процесів дистанційного навчання і контролю. Вона не лише оптимізує навчальний процес, але й відкриває нові шляхи для розвитку сучасної освіти, роблячи її доступнішою та ефективнішою для всіх учасників.

2.2.	Головна функціональність

MF-1:	Реєстрація	та	авторизація	користувачів	в	мобільному застосунку
MF-2: Каталог навчальної програми в мобільному застосунку 
MF-3: Управління обліковим записом користувача MF-4: Сканування SMART-міток у навчальний закладах
MF-5:	Додавання	та	редагування	навчальної програми	адміністраторами	через веб-інтерфейс
MF-6: Додавання нових клієнтів адміністраторами MF-7: Перегляд списку клієнтів
MF-8: Інтеграція з платіжними системами MF-9: Зміна мови інтерфейсу
MF-10:Техпідтримка користувачів для вирішення технічних питань та надання порад та рекомендацій щодо використання системи
MF-11: Інтеграція з іншими службами

2.3.	Припущення та залежності

Зал №1: Клієнти, які здійснюють покупки, можуть використовувати мобільний додаток виключно на платформі Android.
Зал №2: Консультанти в навчальний закладах обладнані портативними SMART-сканерами для зчитування міток клієнтів, у яких вони вже є, для визначення їх оцінкиів навчальної програми та надання відповідних рекомендацій..
Зал №3: Фізичні навчальний заклади мають інтернет-з'єднання для синхронізації з центральною базою даних системи для отримання актуальної інформації про користувачів та їх переваги.

При №1: Клієнти надають точні виміри, що дозволяє їм знаходити речі які їм личать.
При №2: Адміністратори регулярно оновлюють інформацію про наявність заняттяів та їх оцінкии, забезпечуючи точність рекомендацій, які надаються користувачам через мобільний додаток. 
При №3: SMART-мітки, використовувані в системі, характеризуються високою міцністю, призначені для багаторазового використання, мають маленьку вагу, що гарантує легкість у використанні. 
3.	РАМКИ ТА ОБМЕЖЕННЯ ПРОЕКТУ
3.1.	Рамки початкового випуску

MF-1: Реєстрація та авторизація користувачів в мобільному застосунку
Користувачі зможуть створити та керувати своїм акаунтом у додатку, використовуючи електронну пошту та пароль.
MF-2: Каталог навчальної програми в мобільному застосунку
Користувачі можуть переглядати актуальний каталог навчальної програми, включаючи нові колекції та доступні оцінкии.
MF-3: Управління обліковим записом користувача
Можливість оновлення персональної інформації та переваг, щоб забезпечити актуальність даних для персоналізації пропозицій.
MF-4: Сканування SMART-міток у навчальний закладах
Функціонал, який дозволяє консультантам швидко ідентифікувати користувачів та їх оцінки за допомогою SMART-технологій для надання рекомендацій.
MF-5: Додавання та редагування навчальної програми адміністраторами через веб-інтерфейс
Інструменти для ефективного управління асортиментом навчальної програми, доступним в системі.
MF-6: Додавання нових клієнтів адміністраторами
Функція для ручного додавання користувачів адміністраторами через веб-інтерфейс.
MF-7: Перегляд списку клієнтів
Можливість для адміністраторів переглядати повний список користувачів та їх персональну інформацію.
MF-9: Зміна мови інтерфейсу
Опція для користувачів вибирати між українською та англійською мовами інтерфейсу для зручності користування. 

У мобільному застосунку для платформи Android користувачі матимуть змогу:
− реєструватися та авторизуватися, використовуючи ідентифікаційне ім'я та пароль для доступу до свого профілю;
−   переглядати каталог навчальної програми, що включає широкий вибір заняттяів із зазначенням детальної інформації про кожен продукту;
− оновлювати особисті дані у своєму обліковому записі, для отримання персоналізованих рекомендацій;
− сканувати SMART-мітки в навчальний закладах за допомогою портативних сканерів, які мають консультанти, для ідентифікації та отримання рекомендацій згідно з їхніми оцінками навчальної програми.

Для адміністраторів через веб-інтерфейс буде доступно:
−  додавання нового навчальної програми до системи, оновлення інформації про наявні заняття, видалення застарілих позицій та редагування даних про заняття;
− реєстрація нових користувачів, управління їхніми обліковими записами, та перегляд списку всіх користувачів з можливістю доступу до детальної інформації про кожного;
− зміна мови інтерфейсу між українською та англійською для забезпечення комфортного користування системою різними користувачами.

3.2.	Рамки наступних випусків

У веб-застосунку користувачі будуть мати можливість:
−  переглядати оновлений каталог навчальної програми з детальною інформацією про продукти, включаючи доступні оцінкии та нові колекції; 
−  оновлювати персональну інформацію та переваги в стилі через управління обліковим записом для отримання точних персоналізованих рекомендацій;
MF-9: Можливість дистанційного керування системою через мобільний додаток або веб-інтерфейс
Користувачі матимуть можливість здійснювати дистанційне керування системою поливу та освітлення через зручний мобільний додаток або веб-інтерфейс.
MF-10: Техпідтримка користувачів для вирішення технічних питань та надання порад та рекомендацій щодо використання системи
Користувачі можуть звертатися за технічною підтримкою через мобільний додаток або веб-інтерфейс, отримуючи відповіді на технічні запитання, поради та рекомендації щодо використання системи.
MF-11: Інтеграція з іншими службами
Система буде інтегрована з іншими онлайн-сервісами та платформами для забезпечення більш широких можливостей(як приклад замовлення через додаток “Нова Пошта”).

3.3.	Обмеження та винятки

Обмеження та винятки:
-	Залежність від доступу до електроенергії: Система моніторингу та автоматичного поливу може потребувати постійного джерела електроенергії для свого безперебійного функціонування. У випадку відсутності електроенергії, деякі функції системи можуть бути обмежені або недоступні .
-	Система персоналізованого вибору та покупки навчальної програми буде доступною та оптимізованою лише для користувачів з України, що обмежує її використання в інших країнах. 
-	Користувачі з інших операційних систем, таких як iOS, не зможуть встановити або використовувати мобільний додаток.
-	Для реєстрації, авторизації, перегляду каталогу навчальної програми, замовлення  та  інших  онлайн-операцій  необхідне  стабільне інтернет-з'єднання. Відсутність інтернету обмежить функціональність системи.
-	Портативні SMART-сканери, які використовуються консультантами в навчальний закладах, працюють на операційних системах Windows або Linux, що вимагає відповідної сумісності обладнання.
-	Можливість замовлення навчальної програми та оплати через мобільний додаток може бути обмежена для деяких занятть або під час проведення технічних робіт на сервері.
-	Співпраця з певними службами проведення може бути обмежена географічно або вимагати додаткових угод про співпрацю, що може вплинути на швидкість та доступність проведення заняття.
-	Неполадки в роботі SMART-сканерів або міток можуть призвести до затримок або помилок у ідентифікації користувачів та обробці даних про оцінкии навчальної програми. 
4.	БІЗНЕС-КОНТЕКСТ
4.1.	Профілі зацікавлених сторін

Таблиця 1 – Профілі зацікавлених сторін проекту












4.2.	Пріоритети проекту Таблиця 2 – Пріоритети проекту

Вимір	Мета	Обмеження	Ступінь свободи

Розклад	приблизно до 27.06.2024	
1 розробник	50-70% функцій з високим пріоритетом повинні бути включені в реліз 1.0

Функції	приблизно до 27.06.2024	Мобільний та Веб застосунок	
60-80% функцій до першого релізу


Якість	Задовольнити критерії до продукту	

Проведення тестів	

95-98% до першого релізу







4.3.	Робоче середовище

Даний продукт передбачає розробку та використання системи для персоналізованого вибору та покупки навчальної програми, що включає мобільний додаток для кінцевих користувачів та веб-інтерфейс для адміністрування.
Робоче середовище для розробки: 
-	Клієнтська частина розробляється для мобільних пристроїв з операційною системою Android. Для розробки мобільного додатку використовується  React Native. 
-	Адміністративне   середовище   забезпечується   через веб-інтерфейс, що розміщується на сайті та дозволяє адміністраторам управляти каталогом заняттяів, користувацькими профілями, переглядати замовлення та здійснювати інші дії, пов'язані з адмініструванням системи. Розробка на мові програмування Python за допомогою Visual Studio Code.
-	База даних для зберігання інформації про користувачів, продукти, замовлення та інші дані реалізована за допомогою MongoDB.




















5.	СЕРВЕРНАЯ ЧАСТИНА ПРОДУКТУ
5.1.	База даних

У ході роботи було розроблено базу даних з використанням СУБД MongoDB.
MongoDB є широко використовуваною системою керування базами даних з відкритим початковим кодом. Функції цієї системи дозволяють виконувати деякий код безпосередньо на сервері бази даних. MongoDB підтримує різні мови програмування для написання функцій і процедур, зокрема:
–	Python: MongoDB та Python часто використовуються разом для розробки веб-додатків. Python може взаємодіяти з базою даних MongoDB, виконувати запити і обробляти результати з Python.
Для реалізації було створено наступні колекції:
–	users: колекція з даними про користувачів;
–	сourses: колекція з курсами;
–	tests: колекція з тестами;

















5.2.	Backend

Для написання серверної частини коду в проекті, що стосується ідентифікації оцінкиів навчальної програми клієнтів, використовувалися такі технології та бібліотеки:
–	Python: мова програмування, що часто використовується для розробки веб-додатків. Python може взаємодіяти з базою даних MongoDB, виконувати запити та обробляти результати.
–	MongoDB: це система керування базами даних з відкритим початковим кодом. MongoDB забезпечує високу продуктивність, надійність і легкість у використанні. Функції цієї системи дозволяють виконувати код безпосередньо на сервері бази даних.
–	Flask:: це веб-сервер з відкритим кодом, який забезпечує надійність та гнучкість в розгортанні веб-додатків.
Для зв'язку з базою даних і визначення моделей у Python використовується об'єктно-орієнтований підхід. Були розроблені моделі, які представляють json-форматовані об’єкти та забезпечують зручний інтерфейс для взаємодії з ними. (Рис. 1)

 
Рисунок 5.1 – ER-модель даних 
Щодо шифрування паролів та створення токенів авторизації, завдяки Python я використав вбудований засіб, generate_password_hash з werkzeug.security для шифрування паролей. Приклад можна побачити на рисунку 5.1.



Рисунок 5.1 – Приклад захешованого паролю


Хешування паролів забезпечує безпеку, оскільки навіть у разі несанкціонованого доступу до бази даних, зловмисники не зможуть дізнатися справжні паролі користувачів. Замість цього вони побачать тільки хешовані значення, які неможливо легко зворотно перетворити у вихідні паролі.

5.3.	Структура проекту


Проект було структуровано на три шари:
1.	Інтерфейс	користувача	–	налаштування	та	запити,	за допомогою яких
користувач взаємодіє з API – контролери та маршрути.
2.	Логіка бізнес-процесів – обробка та управління даними.
3.	Рівень доступу до даних – робота з базою даних, міграції та забезпечення коректної взаємодії бази даних із сервером. 
5.4.	Діаграми


Розглянемо Deployment Diagram (діаграму розгортання), зображену на рисунку 5.2.
 
Рисунок 5.2 – Діаграма розгортання (Deployment Diagram)

Розглянемо Use Case діаграму, зображену на рисунку 2.3. Можна побачити, що на діаграмі представлені основні користувачі системи та їх взаємодія з різними функціональними можливостями системи.
. 
 
Рисунок 5.3 – Діаграма компонентів (Use Case diagram) Розглянемо Activity diagram яка відображена на рисунку 5.4. 
 

Рисунок 5.4 – Діаграма активності (Activity diagram)


Діаграма активності відображає процес реєстрації нового клієнта в системі. Клієнт відкриває додаток, обирає мову, входить у систему та вводить свої дані. Система перевіряє правильність введених даних. У разі успішної верифікації дані зберігаються у базі, створюється профіль 
клієнта, а інформація про оцінки навчальної програми додається до профілю. Завершується процес відправкою повідомлення про успішну реєстрацію клієнту.

5.5.	Cпецифікація

При написанні запитів було обрано архітектурний стиль REST. Основні принципи REST, які використовуються в проекті, включають
REST (Representational State Transfer) використовується для створення ефективних та масштабованих API. REST забезпечує надійний обмін даними між клієнтом і сервером, що є критично важливим для роботи системи.
Всі ресурси системи доступні через стандартизовані методи HTTP (GET, POST, PUT, DELETE). Це забезпечує прозорість та передбачуваність взаємодії між клієнтом і сервером. Наприклад, для отримання інформації про клієнта використовується метод GET, для створення нового клієнта - POST, для оновлення даних клієнта - PUT, а для видалення клієнта - DELETE.  
6.	ПРИСТРІЙ ІНТЕРНЕТ РЕЧЕЙ
6.1.	Обраний Android застосунок

Android застосунок це USB Reader для зчитування інформації з SMART-мітки.

6.2.	Процес роботи з IOT застосунком

Опис процесу роботи з SMART-читачем:
1.	Підключення читача: Читач підключається до комп'ютера через USB-порт. Після підключення на корпусі читача загоряється індикатор, який сигналізує про готовність пристрою до роботи.
2.	Підготовка SMART-мітки: SMART-мітка, яку потрібно прочитати, наближається до читача. Мітка містить унікальний ідентифікатор, який може бути прочитаний читачем.
3.	Читання інформації: Коли мітка знаходиться в зоні дії читача, читач активує мітку і читає інформацію з неї. Ця інформація потім передається через USB-порт на комп'ютер.
4.	Обробка інформації: Програмне забезпечення на комп'ютері приймає інформацію від читача і обробляє її. Це може включати перевірку ідентифікатора мітки, запис інформації в базу даних або виконання інших дій залежно від конкретного застосування.
5.	Відповідна дія: В результаті обробки інформації система виводить унікальний номер SMART-мітки.

6.3.	Програмне забезпечення та будова пристрою

Для розробки програмного забезпечення для IoT пристрою використовується мова програмування Arduino (.ino). 

6.4.	Діаграми

Розглянемо UML діаграму прецедентів, зображену на рисунку 6.2. 
 

Рисунок 6.2 - UML діаграма прецедентів











































7.	ВЕБ-ДОДАТОК
7.1.	Розробка системи

Система була розроблена відповідно до вказаних бізнес-вимог та концепції рішення.

7.2.	Архітектура та компоненти


1.	Веб-інтерфейс: забезпечує адміністрування системи, включаючи додавання нових заняттяів, реєстрацію нових користувачів, управління обліковими записами та зміну мови інтерфейсу. Розроблено на мові Python ТА HTML з використанням середи розробки Visual Studio Code.
2.	Серверна частина: база даних була реалізовано за допомогою MongoDB для зберігання інформації про користувачів, курси, тести та інші дані. 

7.3.	Реалізований функції веб-додатка


Реалізовані функції базуються на наведених нижче бізнес-функціях:
1.	MF-5: Додавання та редагування навчальної програми адміністраторами через веб-інтерфейс: Адміністратори можуть додавати нові заняттяи до системи, оновлювати інформацію про наявнізаняттяи, видаляти застарілі позиції та редагувати дані про заняття.
2.	MF-6: Додавання нових користувачів адміністраторами: Адміністратори можуть реєструвати нових користувачів, управляти їхніми обліковими записами та переглядати списки користувачів з доступом до детальної інформації про кожного. 
3.	MF-7: Перегляд списку користувачів: Адміністратори можуть переглядати список зареєстрованих користувачів та їх деталі.
4.	MF-9: Зміна мови інтерфейсу: Адміністратори можуть змінювати мову інтерфейсу між українською та англійською для забезпечення комфортного користування системою різними користувачами.

7.4.	Архітектура 

Ця схема представляє архітектуру веб-проекту, де центральне місце займає блок Python, що включає три основні компоненти: Frontend, Backend та Blocks. Зовнішні модулі, такі як JavaScript та мовні налаштування (Languages), взаємодіють з блоком Blocks, забезпечуючи динамічну поведінку та багатомовність застосунку. Модуль завантажень 
(Uploads) взаємодіє з Backend, дозволяючи завантажувати та керувати файлами на сервері. Вся система знаходиться в контейнері Web, що об'єднує всі компоненти проекту.
Адміністратор може занести id пристрою до програмної системи, увімкнути та вимкнути пристрій, а також побачити його статус та дані.
Взаємодія різних користувачів із системою, що складається з мобільного додатка, IoT-компонента та веб-інтерфейсу.
Також була розроблена діаграма взаємодії для візуалізації взаємодії між різними частинами системи та їх процесу. Так як вона велика я розділю її на частини. 


Для реєстрації користувач вводить свої дані, які перевіряються на правильність та унікальність. Якщо дані валідні і користувач ще не зареєстрований, система зберігає їх у базі даних та перенаправляє на головну сторінку.
Процес авторизації включає ведення облікових даних користувачем, перевірку правильності запиту та даних, а також перевірку наявності користувача в базі даних. Якщо дані валідні, користувач успішно авторизується і перенаправляється на іншу сторінку.
Процес починається з перевірки  ролі  користувача  на  головній  сторінці  (index.html). Якщо 
користувач є адміном або супер-адміном, відбувається перенаправлення на відповідні сторінки адміністрування.
1.	Додавання навчальної програми:
Процес починається з перевірки ролі користувача на сторінці додавання навчальної програми (addItemForm.html). Якщо користувач не авторизований, його перенаправляють на сторінку авторизації (logInForm). Після успішної авторизації перевіряється роль користувача. Якщо користувач є адміном, його перенаправляють на сторінку адміністрування (indexAdmin.html). Якщо користувач має іншу роль, дані перевіряються та додаються до бази даних. У випадку успішного додавання, користувача перенаправляють на іншу сторінку.
2.	Додавання клієнта:
Процес аналогічний додаванню навчальної програми. Починається з перевірки ролі користувача на сторінці додавання клієнта (registerClientForm.html). Неавторизовані користувачі перенаправляються на сторінку авторизації (logInForm). Після успішної авторизації перевіряється роль користувача. Якщо  користувач  є  адміном,  його  перенаправляють  на  сторінку 
адміністрування (indexAdmin.html). Якщо користувач має іншу роль, дані перевіряються та додаються до бази даних. У випадку успішного додавання, користувача перенаправляють на іншу сторінку.
1.	Змінення навчальної програми:
Процес починається з перевірки ролі адміністратора на сторінці редагування навчальної програми (editForm.html). Якщо користувач має права адміністратора, він може змінити о за допомогою форми (edit.html). Після внесення змін перевіряється, чи були вони успішно збережені. Якщо зміни успішні, користувач перенаправляється на головну сторінку (index.html). У випадку помилки користувачу показується повідомлення 
про помилку, і процес повертається на етап редагування.
2.	Видалення навчальної програми:
Процес починається аналогічно: перевіряється роль адміністратора на сторінці видалення навчальної програми (editForm.html). Якщо користувач має права адміністратора, він може видалити навчальну програму за допомогою форми (delete.html). Після видалення перевіряється, чи було воно успішним. Якщо видалення успішне, користувач перенаправляється на головну сторінку (index.html). У випадку помилки користувачу показується повідомлення про помилку, і процес повертається на етап видалення. 
8.	МОБІЛЬНИЙ ДОДАТОК
8.1.	Розробка системи

Мобільний застосунок розроблено як частина комплексної системи, що включає кілька компонентів, таких як програма для Arduino для роботи з SMART, веб-інтерфейс та мобільний додаток на React Native. Для даної лабораторної роботи розглядається тільки мобільна частина системи.

Архітектура та компоненти:


1.	Мобільний додаток: Розроблено для платформи Android з використанням React Native та середовища розробки Android Studio.
2.	Серверна частина: Використовується для обробки запитів від мобільного додатка, взаємодії з базою даних та надання відповіді у вигляді JSON об'єктів.

8.2.	Реалізований функції веб-додатка


Реалізовані функції базуються на наведених нижче бізнес-функціях:
1.	MF-1:	Реєстрація	та	авторизація	користувачів	в	мобільному застосунку.
2.	MF-2: Каталог навчальної програми в мобільному застосунку.
3.	MF-3: Управління обліковим записом користувача.









Висновок

У ході виконання курсової роботи було розроблено програмну систему для автоматизації процесів дистанційного навчання і контроля. Система включає декілька компонентів, серед яких мобільний додаток, веб-інтерфейс та IoT пристрій. Основною метою розробки було створення інструменту, який дозволяє автоматизувати процес підбору навчальної програми для клієнтів, забезпечуючи високу точність та зручність користування. 
Перелік джерел посилання



1.	Матеріали	лекцій	з	дисципліни	«Архітектура	програмного забезпечення».
2.	Arduino [Електронний ресурс] – Режим доступу до ресурсу: https://www.php.net/manual/en/, https://dev.mysql.com/doc/, https://docs.oracle.com/javase/8/docs/, https://www.arduino.cc/en/Guide/ArduinoUno
3.	Комплекс навчально-методичного забезпечення навчальної дисципліни "Бази даних" [Електронний ресурс] "Програмна інженерія"; О. О. Мазурова, М. С. Широкопетлєва. – Харків, 2017. – 276 с.
4.	Мартін Р.Чистий код: Створення, аналіз і рефакторинг [Текст] / Роберт Мартін. - Київ: Діалектика, 2010. - 464 с.
5.	Фаулер М. Рефакторинг: покращення існуючого коду [Текст] / Мартін Фаулер. - Київ: Діалектика, 2019. - 448 

